var e=Object.defineProperty,t=(t,n,r)=>((t,n,r)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[n]=r)(t,"symbol"!=typeof n?n+"":n,r),n=(e,t,n)=>new Promise((r,o)=>{var a=e=>{try{i(n.next(e))}catch(t){o(t)}},s=e=>{try{i(n.throw(e))}catch(t){o(t)}},i=e=>e.done?r(e.value):Promise.resolve(e.value).then(a,s);i((n=n.apply(e,t)).next())});import{G as r}from"./index-B52LbCEk.js";const o=new r({apiKey:void 0});const a=new class{constructor(){t(this,"model","gemini-2.5-flash-lite"),t(this,"systemPrompt","You are an advanced medical education AI assistant. You help medical students, residents, and healthcare professionals learn and understand complex medical concepts. \n\nYour responses should be:\n- Accurate and evidence-based\n- Clear and educational\n- Contextually aware of the user's current study material\n- Professional yet approachable\n- Include relevant medical terminology with explanations\n\nAlways cite specific page numbers or chapters when referencing material from books the user is studying.")}generateResponse(e,t,r){return n(this,null,function*(){try{const n=this.buildContextPrompt(t,r),a=(yield o.models.generateContent({model:this.model,contents:[{role:"user",parts:[{text:this.systemPrompt},{text:n},{text:e}]}],config:{temperature:.7,topK:40,topP:.95,maxOutputTokens:2048}})).text||"",s=this.extractRelatedConcepts(a),i=this.extractReferences(a,t.bookId);return{id:this.generateId(),query:e,response:a,context:t,timestamp:new Date,relatedConcepts:s,references:i,confidence:.95}}catch(n){throw console.error("Error generating AI response:",n),new Error("Failed to generate AI response")}})}generateQuizQuestions(e,t,r=5){return n(this,null,function*(){try{const n=`Generate ${r} multiple-choice questions about ${e} in medicine. \n      Difficulty level: ${t}\n      \n      Format each question as JSON with:\n      - question: the question text\n      - options: array of 4 possible answers\n      - correctAnswer: index of correct option (0-3)\n      - explanation: detailed explanation of the answer\n      - relatedConcepts: array of related medical concepts\n      \n      Return only valid JSON array.`,a=(yield o.models.generateContent({model:this.model,contents:[{role:"user",parts:[{text:n}]}]})).text||"[]";return JSON.parse(a)}catch(n){return console.error("Error generating quiz questions:",n),[]}})}summarizeChapter(e,t){return n(this,null,function*(){try{const n=`Summarize the following medical chapter "${t}" in a clear, structured format:\n      \n      ${e}\n      \n      Include:\n      1. Key concepts\n      2. Important definitions\n      3. Clinical relevance\n      4. Study tips`;return(yield o.models.generateContent({model:this.model,contents:[{role:"user",parts:[{text:n}]}]})).text||""}catch(n){throw console.error("Error summarizing chapter:",n),new Error("Failed to summarize chapter")}})}explainConcept(e,t){return n(this,null,function*(){try{const n=`Explain the medical concept "${e}" for a ${t}.\n      \n      Include:\n      - Definition\n      - Clinical significance\n      - Common examples\n      - Related concepts\n      - Memory aids or mnemonics if applicable`;return(yield o.models.generateContent({model:this.model,contents:[{role:"user",parts:[{text:n}]}]})).text||""}catch(n){throw console.error("Error explaining concept:",n),new Error("Failed to explain concept")}})}buildContextPrompt(e,t){let n=`Current context:\n    - Studying from book ID: ${e.bookId}\n    - User level: ${e.userLevel}`;return e.currentPage&&(n+=`\n- Currently on page: ${e.currentPage}`),e.currentChapter&&(n+=`\n- Current chapter: ${e.currentChapter}`),e.recentTopics.length>0&&(n+=`\n- Recent topics studied: ${e.recentTopics.join(", ")}`),t&&(n+=`\n\nRelevant book content:\n${t}`),n}extractRelatedConcepts(e){const t=[];return(e.match(/\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*\b/g)||[]).forEach(e=>{e.length>4&&!t.includes(e)&&t.push(e)}),t.slice(0,5)}extractReferences(e,t){const n=[];return(e.match(/page\s+(\d+)/gi)||[]).forEach(r=>{const o=parseInt(r.replace(/page\s+/i,""));n.push({bookId:t,page:o,excerpt:e.substring(e.indexOf(r)-50,e.indexOf(r)+50)})}),n}generateId(){return`ai-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}};export{a as m};
