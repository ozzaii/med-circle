var e=Object.defineProperty,n=(n,t,r)=>((n,t,r)=>t in n?e(n,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[t]=r)(n,"symbol"!=typeof t?t+"":t,r),t=(e,n,t)=>new Promise((r,o)=>{var a=e=>{try{s(t.next(e))}catch(n){o(n)}},i=e=>{try{s(t.throw(e))}catch(n){o(n)}},s=e=>e.done?r(e.value):Promise.resolve(e.value).then(a,i);s((t=t.apply(e,n)).next())});import"./index-CePBnFrN.js";const r=new class{constructor(){n(this,"model"),n(this,"systemPrompt","You are an advanced medical education AI assistant. You help medical students, residents, and healthcare professionals learn and understand complex medical concepts. \n\nYour responses should be:\n- Accurate and evidence-based\n- Clear and educational\n- Contextually aware of the user's current study material\n- Professional yet approachable\n- Include relevant medical terminology with explanations\n\nAlways cite specific page numbers or chapters when referencing material from books the user is studying.")}generateResponse(e,n,r){return t(this,null,function*(){try{if(!this.model)throw new Error("Gemini API key not configured. Please add VITE_GEMINI_API_KEY to your environment variables.");const t=this.buildContextPrompt(n,r),o=`${this.systemPrompt}\n\n${t}\n\nUser Query: ${e}`,a=yield this.model.generateContent(o),i=(yield a.response).text()||"",s=this.extractRelatedConcepts(i),c=this.extractReferences(i,n.bookId);return{id:this.generateId(),query:e,response:i,context:n,timestamp:new Date,relatedConcepts:s,references:c,confidence:.95}}catch(t){throw console.error("Error generating AI response:",t),new Error("Failed to generate AI response")}})}generateQuizQuestions(e,n,r=5){return t(this,null,function*(){try{if(!this.model)return[];const t=`Generate ${r} multiple-choice questions about ${e} in medicine. \n      Difficulty level: ${n}\n      \n      Format each question as JSON with:\n      - question: the question text\n      - options: array of 4 possible answers\n      - correctAnswer: index of correct option (0-3)\n      - explanation: detailed explanation of the answer\n      - relatedConcepts: array of related medical concepts\n      \n      Return only valid JSON array.`,o=yield this.model.generateContent(t),a=(yield o.response).text()||"[]";return JSON.parse(a)}catch(t){return console.error("Error generating quiz questions:",t),[]}})}summarizeChapter(e,n){return t(this,null,function*(){try{if(!this.model)throw new Error("Gemini API key not configured");const t=`Summarize the following medical chapter "${n}" in a clear, structured format:\n      \n      ${e}\n      \n      Include:\n      1. Key concepts\n      2. Important definitions\n      3. Clinical relevance\n      4. Study tips`,r=yield this.model.generateContent(t);return(yield r.response).text()||""}catch(t){throw console.error("Error summarizing chapter:",t),new Error("Failed to summarize chapter")}})}explainConcept(e,n){return t(this,null,function*(){try{if(!this.model)throw new Error("Gemini API key not configured");const t=`Explain the medical concept "${e}" for a ${n}.\n      \n      Include:\n      - Definition\n      - Clinical significance\n      - Common examples\n      - Related concepts\n      - Memory aids or mnemonics if applicable`,r=yield this.model.generateContent(t);return(yield r.response).text()||""}catch(t){throw console.error("Error explaining concept:",t),new Error("Failed to explain concept")}})}buildContextPrompt(e,n){let t=`Current context:\n    - Studying from book ID: ${e.bookId}\n    - User level: ${e.userLevel}`;return e.currentPage&&(t+=`\n- Currently on page: ${e.currentPage}`),e.currentChapter&&(t+=`\n- Current chapter: ${e.currentChapter}`),e.recentTopics.length>0&&(t+=`\n- Recent topics studied: ${e.recentTopics.join(", ")}`),n&&(t+=`\n\nRelevant book content:\n${n}`),t}extractRelatedConcepts(e){const n=[];return(e.match(/\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*\b/g)||[]).forEach(e=>{e.length>4&&!n.includes(e)&&n.push(e)}),n.slice(0,5)}extractReferences(e,n){const t=[];return(e.match(/page\s+(\d+)/gi)||[]).forEach(r=>{const o=parseInt(r.replace(/page\s+/i,""));t.push({bookId:n,page:o,excerpt:e.substring(e.indexOf(r)-50,e.indexOf(r)+50)})}),t}generateId(){return`ai-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}};export{r as m};
